#!/usr/bin/env bun
import { main } from "../src/lib/orchestrator";
import packageJson from "../package.json" assert { type: 'json' };
const VERSION = packageJson.version ?? '0.0.0';
import { configureInteractive } from "../src/lib/config";
import { setupClaudeDotfiles } from "../src/lib/claudeDotfilesSetup";

function printHelp(): void {
  console.log(`Usage: imploid [options]

Options:
  --config [path]   Launch interactive configuration (default: config.json)
  --help            Show this help message
  --setup           Copy Claude command templates into .claude/commands
  --version         Show the current version

Version: ${VERSION}`);
}

async function run(): Promise<void> {
  const args = process.argv.slice(2);
  let showHelp = false;
  let configMode = false;
  let configPath: string | undefined;
  let showVersion = false;
  let setupMode = false;
  const unknownArgs: string[] = [];

  for (let i = 0; i < args.length; i += 1) {
    const arg = args[i];
    if (arg === "--help" || arg === "-h") {
      showHelp = true;
    } else if (arg === "--version" || arg === "-v") {
      showVersion = true;
    } else if (arg === "--config" || arg === "-c") {
      configMode = true;
      const next = args[i + 1];
      if (next && !next.startsWith("-")) {
        configPath = next;
        i += 1;
      }
    } else if (arg.startsWith("--config=")) {
      configMode = true;
      configPath = arg.split("=")[1] ?? undefined;
    } else if (arg === "--setup") {
      setupMode = true;
    } else {
      unknownArgs.push(arg);
    }
  }

  if (configMode && typeof configPath === "string") {
    configPath = configPath.trim() || undefined;
  }

  if (unknownArgs.length) {
    console.error(`Unknown option(s): ${unknownArgs.join(", ")}`);
    showHelp = true;
  }

  if (showHelp) {
    printHelp();
    process.exitCode = unknownArgs.length ? 1 : 0;
    return;
  }

  if (showVersion) {
    console.log(`imploid ${VERSION}`);
    return;
  }

  if (setupMode) {
    await setupClaudeDotfiles();
    return;
  }

  try {
    if (configMode) {
      await configureInteractive(configPath);
      return;
    }
    await main();
  } catch (error) {
    console.error("Imploid failed", error);
    process.exitCode = 1;
  }
}

run();
