#!/usr/bin/env bun
import { spawnSync } from "node:child_process";
import { main } from "../src/lib/orchestrator";
import packageJson from "../package.json" assert { type: 'json' };
const VERSION = packageJson.version ?? '0.0.0';
const DESCRIPTION = typeof packageJson.description === "string" ? packageJson.description : undefined;
import { configureInteractive, SUPPORTED_PROCESSORS } from "../src/lib/config";
import type { ProcessorName } from "../src/lib/config";
import { installClaudeCommands } from "../src/lib/claudeCommandsInstaller";

function parseProcessorsArgument(value: string): { processors?: ProcessorName[]; error?: string } {
  const segments = value
    .split(",")
    .map((segment) => segment.trim().toLowerCase())
    .filter((segment) => segment.length > 0);

  if (!segments.length) {
    return { error: "--processors expects a comma-separated list (e.g. claude,codex)." };
  }

  const unique: ProcessorName[] = [];
  for (const segment of segments) {
    if (!SUPPORTED_PROCESSORS.includes(segment as ProcessorName)) {
      return {
        error: `Unknown processor \"${segment}\". Supported processors: ${SUPPORTED_PROCESSORS.join(", ")}.`,
      };
    }
    if (!unique.includes(segment as ProcessorName)) {
      unique.push(segment as ProcessorName);
    }
  }

  return { processors: unique };
}

function ensureGhCliAvailable(): boolean {
  const result = spawnSync("gh", ["--version"], { stdio: "ignore" });
  if (result.error || result.status !== 0) {
    console.error(
      "GitHub CLI (gh) is required but was not found. Please install it from https://cli.github.com/ and rerun imploid."
    );
    return false;
  }
  return true;
}

function printHelp(): void {
  console.log(`Usage: imploid [options]

Options:
  --config [path]          Launch interactive configuration (default: config.json)
  --foreground             Run in foreground mode with continuous monitoring
  --help                   Show this help message
  --install-commands       Install Claude command templates into .claude/commands
  --processors <claude,...>  Run only the specified processors (comma-separated)
  --quiet                  Suppress the startup banner
  --version                Show the current version

Version: ${VERSION}`);
}

async function run(): Promise<void> {
  const args = process.argv.slice(2);
  let showHelp = false;
  let configMode = false;
  let configPath: string | undefined;
  let showVersion = false;
  let installCommandsMode = false;
  let processorsArg: string | undefined;
  let processorsOverride: ProcessorName[] | undefined;
  let processorError: string | undefined;
  const unknownArgs: string[] = [];
  let quietMode = false;
  let foregroundMode = false;

  for (let i = 0; i < args.length; i += 1) {
    const arg = args[i];
    if (arg === "--help" || arg === "-h") {
      showHelp = true;
    } else if (arg === "--version" || arg === "-v") {
      showVersion = true;
    } else if (arg === "--config" || arg === "-c") {
      configMode = true;
      const next = args[i + 1];
      if (next && !next.startsWith("-")) {
        configPath = next;
        i += 1;
      }
    } else if (arg.startsWith("--config=")) {
      configMode = true;
      configPath = arg.split("=")[1] ?? undefined;
    } else if (arg === "--install-commands") {
      installCommandsMode = true;
    } else if (arg === "--processors") {
      const next = args[i + 1];
      if (next && !next.startsWith("-")) {
        processorsArg = next;
        i += 1;
      } else {
        processorError = "--processors requires a comma-separated list (e.g. claude,codex).";
        break;
      }
    } else if (arg.startsWith("--processors=")) {
      processorsArg = arg.split("=")[1] ?? "";
    } else if (arg === "--quiet" || arg === "-q") {
      quietMode = true;
    } else if (arg === "--foreground" || arg === "-f") {
      foregroundMode = true;
    } else {
      unknownArgs.push(arg);
    }
  }

  if (!processorError && processorsArg !== undefined) {
    const result = parseProcessorsArgument(processorsArg);
    if (result.error) {
      processorError = result.error;
    } else {
      processorsOverride = result.processors;
    }
  }

  if (configMode && typeof configPath === "string") {
    configPath = configPath.trim() || undefined;
  }

  if (processorError) {
    console.error(processorError);
    process.exitCode = 1;
    return;
  }

  if (unknownArgs.length) {
    console.error(`Unknown option(s): ${unknownArgs.join(", ")}`);
    showHelp = true;
  }

  if (showHelp) {
    printHelp();
    process.exitCode = unknownArgs.length ? 1 : 0;
    return;
  }

  if (showVersion) {
    console.log(`imploid ${VERSION}`);
    return;
  }

  if (installCommandsMode) {
    await installClaudeCommands();
    return;
  }

  try {
    if (configMode) {
      await configureInteractive(configPath);
      return;
    }
    if (!ensureGhCliAvailable()) {
      process.exitCode = 1;
      return;
    }
    await main({
      processors: processorsOverride,
      quiet: quietMode,
      foreground: foregroundMode,
      version: VERSION,
      description: DESCRIPTION,
    });
  } catch (error) {
    console.error("Imploid failed", error);
    process.exitCode = 1;
  }
}

run();
